#
#                          Copyright (C) 2020 by Rafael Santiago
#
# Use of this source code is governed by GPL-v2 license that can
# be found in the COPYING file.
#

include ../forgeutils/toolset.hsl
include ~/fsutil.hsl
include ~/lsutil.hsl

var src type list;
var includes type list;
var cflags type list;
var libraries type list;
var ldflags type list;
var appname type string;

var curr_toolset type string;

project lethe-tests : toolset $curr_toolset : $src, $includes, $cflags, $libraries, $ldflags, $appname;

lethe-tests.preloading() {
    $curr_toolset = get_app_toolset();
}

lethe-tests.prologue() {
    if (hefesto.sys.os_name() != "windows") {
        set_devpath();
    }
    if (build_libcutest() != 0) {
        hefesto.project.abort(1);
    }
    $src.ls(".*\\.c$");
    $includes = hefesto.sys.get_option("includes");
    $cflags = hefesto.sys.get_option("cflags");
    $libraries = hefesto.sys.get_option("libraries");
    $ldflags = hefesto.sys.get_option("ldflags");
    if (hefesto.sys.os_name() == "linux") {
        $ldflags.add_item("-lpthread");
        $ldflags.add_item("-ldl");
    } else if (hefesto.sys.os_name() == "freebsd" ||
               hefesto.sys.os_name() == "netbsd"  ||
               hefesto.sys.os_name() == "openbsd") {
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
    } else if (hefesto.sys.os_name() == "minix") {
        $ldflags.add_item("-lexecinfo");
    } else if (hefesto.sys.os_name() == "sunos") {
        $ldflags.add_item("-lpthread");
        $cflags.add_item("-DNO_CUTEST_BACKTRACING=1");
    }
    get_lethe_objects($ldflags);
    $appname = "lethe-tests";
    if (hefesto.sys.os_name() == "windows") {
        $appname = $appname + ".exe";
    } else {
        if (isdir("/usr/lib")) {
            $libraries.add_item("/usr/lib");
        }
        if (isdir("/usr/local/lib")) {
            $libraries.add_item("/usr/local/lib");
        }
        if (isdir("/usr/local/include")) {
            $includes.add_item("/usr/local/include");
        }
    }
    var option type list;
    $option = hefesto.sys.get_option("forge-type");
    if ($option.item(0) == "lib") {
        $cflags.add_item("-DLETHE_LIB=1");
    } else if ($option.item(0) == "tool") {
        $cflags.add_item("-DLETHE_TOOL=1");
        build_dynrand();
    }
}

lethe-tests.epilogue() {
    if (hefesto.sys.last_forge_result() == 0) {
        var exit_code type int;
        $exit_code = hefesto.sys.run(hefesto.sys.make_path("bin", $appname) +
                                     " --cutest-leak-check=yes " + hefesto.project.cmdline());
        if ($exit_code == 0) {
            hefesto.sys.echo("*** BUILD SUCCESS.\n");
        } else {
            hefesto.sys.echo("~~~ BUILD FAIL.\n");
        }
    }
}

local function get_lethe_objects(ldflags type list) : result type none {
    var old_cwd type string;
    $old_cwd = hefesto.sys.pwd();

    if (hefesto.sys.cd("../o") != 1) {
        hefesto.sys.echo("BUILD ERROR: Unable to get object files. Have you built the library or tool before?\n");
        hefesto.project.abort(1);
    }

    var l type int;
    $l = $ldflags.count() + 1;

    $ldflags.ls(".*\\.o$");

    while ($l < $ldflags.count()) {
        var fpath type string;
        $fpath = $ldflags.item($l);
        if ($fpath.match(".*main\\.o$") == 1) {
            $ldflags.del_index($l);
            break;
        }
        $l = $l + 1;
    }

    if (hefesto.sys.os_name() == "windows") {
        $l = 0;
        while ($l < $ldflags.count()) {
            $fpath = $ldflags.item($l);
            if ($fpath.match(".*\\.o$") == 1) {
                $fpath = "\"" + $fpath + "\"";
                $ldflags.del_index($l);
                $ldflags.add_item($fpath);
            } else {
                $l = $l + 1;
            }
        }
    }

    hefesto.sys.byref($ldflags);
    hefesto.sys.cd($old_cwd);
}

local function build_libcutest() : result type int {
    if (isfile("cutest/src/lib/libcutest.a")) {
        result 0;
    }
    if (hefesto.sys.cd("cutest/src") != 1) {
        hefesto.sys.echo("BUILD ERROR: Cutest's submodule was not initialised.\n");
        hefesto.project.abort(1);
    }
    var exit_code type int;
    $exit_code = hefesto.sys.run("hefesto");
    hefesto.sys.cd("../../");
    result $exit_code;
}

local function build_dynrand() : result type none {
    if (hefesto.sys.cd("dynrand")) {
        if (hefesto.sys.run("hefesto") != 0) {
            hefesto.project.abort(1);
        }
        hefesto.sys.cd("..");
    } else {
        hefesto.sys.echo("BUILD ERROR: Project 'dynrand' not found.\n");
        hefesto.project.abort(1);
    }
}

local function set_devpath() : result type none {
    var lines type list;
    $lines = hefesto.sys.lines_from_file("../DEV_PATH", ".*");
    if ($lines.count() == 0) {
        $lines = hefesto.sys.lines_from_file("/etc/fstab", "^/.*[\\t ]/[\\t ].*");
        var devpath type string;
        if ($lines.count() != 1) {
            $devpath = hefesto.sys.prompt("It was not possible to guess the device path of your '/'. Please provide this path: ");
            if ($devpath.len() == 0) {
                hefesto.sys.echo("ERROR: Unable to set your devpath. Aborting.\n");
                hefesto.project.abort(1);
            }
            var devpath_confirm type string;
            $devpath_confirm = hefesto.sys.prompt("Confirm this path by inputing it again: ");
            if ($devpath != $devpath_confirm) {
                hefesto.sys.echo("ERROR: The paths do not match.\n");
                hefesto.project.abort(1);
            }
            $devpath = $devpath + "\n";
        } else {
            $devpath = $lines.item(0);
            $devpath.replace("[\\t ].*/.*$", "\n");
        }
        var fp type file;
        $fp = hefesto.sys.fopen("../DEV_PATH", "w");
        if ($fp == 0) {
            hefesto.sys.echo("ERROR: Unable to save device path to ../DEV_PATH config file.\n");
            hefesto.project.abort(1);
        }
        hefesto.sys.fwrite($devpath, $devpath.len(), $fp);
        hefesto.sys.fclose($fp);
        $devpath.replace("\\n", "");
        hefesto.sys.echo("======================================================================================================================\n");
        hefesto.sys.echo("INFO: The lethe_drop() tests will use '" + $devpath + "' if lethe's source code tree is not stored into this\n" +
                         "      device you need to change the content of '../DEV_PATH' to the correct device path where this repository is\n" +
                         "      actually stored. Otherwise some tests will break and it will be impossible to test if Lethe is really working on\n" +
                         "      your system.\n");
        hefesto.sys.echo("======================================================================================================================\n\n");
    }
}
